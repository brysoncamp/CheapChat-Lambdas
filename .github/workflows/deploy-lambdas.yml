name: Deploy AWS Lambdas and Layers

on:
  push:
    branches:
      - main

jobs:
  deploy-layers: 
    runs-on: ubuntu-latest
    strategy:
      matrix:
        layer:
          - openAILayer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies for Lambda layers
        run: |
          cd layers/${{ matrix.layer }}/nodejs
          npm install

      - name: Prepare Lambda layer zip
        run: |
          cd layers/${{ matrix.layer }}
          zip -r ../${{ matrix.layer }}.zip nodejs


      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Deploy or Update Lambda Layer
        run: |
          # Publish new layer version and get its version number
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name ${{ matrix.layer }} \
            --zip-file fileb://layers/${{ matrix.layer }}.zip \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Version' --output text)

          # Define functions that should be updated for each layer
          declare -A LAYER_FUNCTIONS=(
            ["openAILayer"]="openAIHandler"
          )

          FUNCTIONS="${LAYER_FUNCTIONS["${{ matrix.layer }}"]}"

          # Update only relevant functions
          if [[ -n "$FUNCTIONS" ]]; then
            for FUNCTION in $FUNCTIONS; do
              aws lambda update-function-configuration \
                --function-name $FUNCTION \
                --layers arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:${{ matrix.layer }}:$LAYER_VERSION
            done
          fi

  # EXAMPLE (extended version) for ^^^^^
  #
  # declare -A LAYER_FUNCTIONS=(
  #   ["openAILayer"]="openAIHandler messageRouterHandler"
  #   ["stripeLayer"]="handleStripeWebhook createPaymentSession"
  # )

  deploy-functions:  # ✅ Separate job for functions
    runs-on: ubuntu-latest
    needs: deploy-layers  # ✅ Wait for layer deployment to complete
    strategy:
      matrix:
        function:
          - createPaymentSession
          - preflightCORSHandler
          - cognitoUserSync
          - handleStripeWebhook
          - webSocketConnectHandler
          - messageRouterHandler
          - openAIHandler
          - perplexityHandler
          - getChatHistory

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies for Lambda functions
        run: |
          cd lambdas/${{ matrix.function }}
          npm install

      - name: Zip the Lambda function
        run: |
          cd lambdas/${{ matrix.function }}
          zip -r ../../${{ matrix.function }}.zip .

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda function to AWS
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.function }} \
            --zip-file fileb://${{ matrix.function }}.zip \
            --region ${{ secrets.AWS_REGION }}
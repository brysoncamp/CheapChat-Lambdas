name: Deploy AWS Lambdas and Layers

on:
  push:
    branches:
      - main

jobs:
  deploy-layers:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1
      matrix:
        layer:
          - openAILayer
          - modelLayer
          - awsLayer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies for Lambda layers
        run: |
          cd layers/${{ matrix.layer }}/nodejs
          npm install

      - name: Prepare Lambda layer zip
        run: |
          cd layers/${{ matrix.layer }}
          zip -r ../${{ matrix.layer }}.zip nodejs

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Deploy or Update Lambda Layer
        run: |
          # 1) Publish a new version of the layer
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name ${{ matrix.layer }} \
            --zip-file fileb://layers/${{ matrix.layer }}.zip \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Version' \
            --output text)

          # Build the ARN of the new layer
          NEW_LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:${{ matrix.layer }}:$LAYER_VERSION"

          # 2) Map each layer to one or more functions
          declare -A LAYER_FUNCTIONS=(
            ["openAILayer"]="openAIHandler messageRouterHandler"
            ["modelLayer"]="openAIHandler"
            ["awsLayer"]="openAIHandler messageRouterHandler"
          )

          FUNCTIONS="${LAYER_FUNCTIONS["${{ matrix.layer }}"]}"
          if [[ -z "$FUNCTIONS" ]]; then
            echo "No functions mapped to ${{ matrix.layer }}, skipping update."
            exit 0
          fi

          for FUNCTION in $FUNCTIONS; do
            echo "Updating function: $FUNCTION with layer: $NEW_LAYER_ARN"

            # 3) Retrieve current layers for the function
            OLD_LAYERS=$(aws lambda get-function-configuration \
              --function-name "$FUNCTION" \
              --query 'Layers[].Arn' \
              --output text 2>/dev/null | tr '\n' ' ')

            # 4) Remove None or empty values
            if [[ -z "$OLD_LAYERS" || "$OLD_LAYERS" == "None" ]]; then
              OLD_LAYERS=""
            fi

            # 5) Filter out any layer ARN that references the same layer NAME
            CLEANED_OLD_LAYERS=""
            for L in $OLD_LAYERS; do
              if [[ "$L" != *":layer:${{ matrix.layer }}:"* ]]; then
                CLEANED_OLD_LAYERS="$CLEANED_OLD_LAYERS $L"
              fi
            done

            # Ensure CLEANED_OLD_LAYERS is properly formatted
            CLEANED_OLD_LAYERS=$(echo "$CLEANED_OLD_LAYERS" | xargs) # Removes extra spaces

            # 6) Combine old layers with new ARN properly
            if [[ -z "$CLEANED_OLD_LAYERS" ]]; then
              FINAL_LAYERS="$NEW_LAYER_ARN"
            else
              FINAL_LAYERS="$CLEANED_OLD_LAYERS $NEW_LAYER_ARN"
            fi

            # 7) Ensure FINAL_LAYERS does not contain None
            FINAL_LAYERS=$(echo "$FINAL_LAYERS" | sed 's/None//g' | xargs)

            # 8) Convert to array format for AWS CLI
            LAYER_ARGS=()
            for LAYER in $FINAL_LAYERS; do
              LAYER_ARGS+=("$LAYER")
            done

            # Debugging output
            echo "Updating function: $FUNCTION with layers: ${LAYER_ARGS[@]}"

            # 9) Update function with properly formatted layers
            aws lambda update-function-configuration \
              --function-name "$FUNCTION" \
              --layers "${LAYER_ARGS[@]}"



          done

  # --------------
  # Example usage for extended mapping:
  # declare -A LAYER_FUNCTIONS=(
  #   ["openAILayer"]="openAIHandler messageRouterHandler"
  #   ["stripeLayer"]="handleStripeWebhook createPaymentSession"
  # )
  # --------------

  deploy-functions:
    runs-on: ubuntu-latest
    needs: deploy-layers
    strategy:
      matrix:
        function:
          - createPaymentSession
          - preflightCORSHandler
          - cognitoUserSync
          - handleStripeWebhook
          - webSocketConnectHandler
          - messageRouterHandler
          - openAIHandler
          - perplexityHandler
          - getChatHistory
          - getRecentConversations

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies for Lambda functions
        run: |
          cd lambdas/${{ matrix.function }}
          npm install

      - name: Zip the Lambda function
        run: |
          cd lambdas/${{ matrix.function }}
          zip -r ../../${{ matrix.function }}.zip .

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda function to AWS
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.function }} \
            --zip-file fileb://${{ matrix.function }}.zip \
            --region ${{ secrets.AWS_REGION }}

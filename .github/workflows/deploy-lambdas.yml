name: Deploy AWS Lambdas and Layers

on:
  push:
    branches:
      - main

jobs:
  deploy-layers:
    runs-on: ubuntu-latest
    strategy:
      max-parallel: 1  # Ensures each layer publish/update runs sequentially
      matrix:
        layer:
          - openAILayer
          - modelLayer
          - awsLayer

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies for Lambda layers
        run: |
          cd layers/${{ matrix.layer }}/nodejs
          npm install

      - name: Prepare Lambda layer zip
        run: |
          cd layers/${{ matrix.layer }}
          zip -r ../${{ matrix.layer }}.zip nodejs

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Deploy or Update Lambda Layer
        run: |
          # 1) Publish a new version of the layer
          LAYER_VERSION=$(aws lambda publish-layer-version \
            --layer-name ${{ matrix.layer }} \
            --zip-file fileb://layers/${{ matrix.layer }}.zip \
            --region ${{ secrets.AWS_REGION }} \
            --query 'Version' \
            --output text)

          # 2) Map each layer to one or more functions
          declare -A LAYER_FUNCTIONS=(
            ["openAILayer"]="openAIHandler"
            ["modelLayer"]="openAIHandler"
            ["awsLayer"]="openAIHandler"
          )

          FUNCTIONS="${LAYER_FUNCTIONS["${{ matrix.layer }}"]}"
          if [[ -z "$FUNCTIONS" ]]; then
            echo "No functions mapped to ${{ matrix.layer }}, skipping update."
            exit 0
          fi

          # 3) Build the ARN for the newly published layer
          NEW_LAYER_ARN="arn:aws:lambda:${{ secrets.AWS_REGION }}:${{ secrets.AWS_ACCOUNT_ID }}:layer:${{ matrix.layer }}:$LAYER_VERSION"

          # 4) For each function mapped to this layer, retrieve existing layers and add the new one
          for FUNCTION in $FUNCTIONS; do
            echo "Updating function: $FUNCTION with layer: $NEW_LAYER_ARN"
            
            # Retrieve current layers (space-separated)
            OLD_LAYERS=$(aws lambda get-function-configuration \
              --function-name "$FUNCTION" \
              --query 'Layers[].Arn' \
              --output text 2>/dev/null | tr '\n' ' ')

            # If the function has no layers yet, OLD_LAYERS might be empty.
            # Now update with both old layers (if any) plus the new one
            aws lambda update-function-configuration \
              --function-name "$FUNCTION" \
              --layers $OLD_LAYERS "$NEW_LAYER_ARN"
          done

  # --------------
  # Example usage for extended mapping:
  # declare -A LAYER_FUNCTIONS=(
  #   ["openAILayer"]="openAIHandler messageRouterHandler"
  #   ["stripeLayer"]="handleStripeWebhook createPaymentSession"
  # )
  # --------------

  deploy-functions:
    runs-on: ubuntu-latest
    needs: deploy-layers
    strategy:
      matrix:
        function:
          - createPaymentSession
          - preflightCORSHandler
          - cognitoUserSync
          - handleStripeWebhook
          - webSocketConnectHandler
          - messageRouterHandler
          - openAIHandler
          - perplexityHandler
          - getChatHistory

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 22

      - name: Install dependencies for Lambda functions
        run: |
          cd lambdas/${{ matrix.function }}
          npm install

      - name: Zip the Lambda function
        run: |
          cd lambdas/${{ matrix.function }}
          zip -r ../../${{ matrix.function }}.zip .

      - name: Configure AWS CLI
        run: |
          aws configure set aws_access_key_id ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws configure set aws_secret_access_key ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws configure set region ${{ secrets.AWS_REGION }}

      - name: Deploy Lambda function to AWS
        run: |
          aws lambda update-function-code \
            --function-name ${{ matrix.function }} \
            --zip-file fileb://${{ matrix.function }}.zip \
            --region ${{ secrets.AWS_REGION }}